from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ChatPermissions
from aiogram.filters import Command, CommandObject
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta
from contextlib import suppress
import pymorphy3
import re
import asyncio
import logging
proverka_row = ['***', '***', '***']
morph = pymorphy3.MorphAnalyzer()
proverka = set(morph.parse(pr)[0].normal_form for pr in proverka_row) # –ü—Ä–∏–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∫ –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ

checking = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
logging.basicConfig(level=logging.INFO)

async def admin(bot, message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    bot = await bot.get_chat_member(message.chat.id, bot.id)
    if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR] or bot.status == ChatMemberStatus.ADMINISTRATOR:
        return True
    return False

def get_time(time: str | None):
    if not time:
        return None
    
    re_match = re.match(r"(\d+)([h|d|w|m])", time.lower().strip()) # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª—É —à–∞–±–ª–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5h
    now_datetime = datetime.now()

    if re_match:
        value = int(re_match.group(1))
        unit = re_match.group(2)

        match unit:
            case "h": time_delta = timedelta(hours=value)
            case "d": time_delta = timedelta(days=value)
            case "w": time_delta = timedelta(weeks=value)
            case "m": time_delta = timedelta(days=30*value)
            case _: return None
    else:
        return None
    
    new_datetime = now_datetime + time_delta
    return new_datetime

router = Router()
router.message.filter(F.chat.type == 'supergroup', F.from_user.id == ***)

@router.message(Command('ban'))
async def ban(message: Message, bot: Bot, command: CommandObject):
    reply_message = message.reply_to_message
    if not await admin(bot, message):
        await message.reply('<b>–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞!</b>')
    if not reply_message or not reply_message.from_user:
        await message.reply('<b>–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å!</b>')
    date = await get_time(command.args.strip() if command.args else None)
    if date is None:
        await message.reply('–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1d, 5h, 2w)')
        return
    with suppress(TelegramBadRequest):
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=reply_message.from_user.id, until_date=date)
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')

@router.message(Command('unban'))
async def unban(message: Message, bot: Bot):
    reply_message = message.reply_to_message
    if not await admin(bot, message):
        await message.reply('<b>–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞!</b>')
    if not reply_message or not reply_message.from_user:
        await message.reply('<b>–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å!</b>')
    await bot.unban_chat_member(chat_id=message.chat.id, user_id=reply_message.from_user.id)
    await message.answer('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞!')

@router.message(Command("mute"))
async def func_mute(message: Message, bot: Bot, command: CommandObject):
    reply_message = message.reply_to_message
    
    if not reply_message or not await admin(bot, message):
        await message.reply("<b>‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>")
        return
    
    date = get_time(command.args.strip() if command.args else None)
    with suppress(TelegramBadRequest):
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=reply_message.from_user.id, until_date=date, permissions=ChatPermissions(can_send_messages=False, can_send_other_messages=False))
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω!")

@router.message(Command('unmute'))
async def unmute(message: Message, bot: Bot):
    reply_message = message.reply_to_message
    if not await admin(bot, message):
        await message.reply('<b>–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞!</b>')
    if not reply_message or not reply_message.from_user:
        await message.reply('<b>–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å!</b>')
    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=reply_message.from_user.id,
        permissions=ChatPermissions(
            can_send_messages=True, can_send_other_messages=True
        )
    )
    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º—É—á–µ–Ω!')

@router.message(F.text)
async def check(message: Message, bot: Bot):
    if not message.text or not message.from_user:
        return
    user_id = message.from_user.id
    try:
        for msg in message.text.lower().strip().split(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            norm_word = morph.parse(msg)[0].normal_form
            if norm_word in proverka:
                checking[user_id] = checking.get(user_id, 0) + 1
                check = checking[user_id]
                if check < 3:
                    await message.reply(f'–†—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {check}/3')
                else:
                    checking[user_id] = 0
                    date = datetime.now() + timedelta(weeks=1)
                    with suppress(TelegramBadRequest): # –î–ª—è –∏–≥–Ω–æ—Ä–∞ –æ—à–∏–±–æ–∫ Telegram, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ª–æ–º–∞–ª—Å—è
                        await bot.restrict_chat_member(
                            chat_id=message.chat.id,
                            user_id=user_id,
                            until_date=date,
                            permissions=ChatPermissions(can_send_messages=False)
                        )
                        await message.reply('–í—ã –ø–æ–ª—É—á–∏–ª–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é!')
                break  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}')
async def main():
    bot = Bot(token='***', default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
